{"name":"Matador","tagline":"an MVC framework for Node","body":"# Matador\r\nSane defaults and a simple structure, scaling as your application grows.\r\n\r\nMatador is a clean, organized framework for [Node.js](http://nodejs.org) architected to suit MVC enthusiasts. It gives you a well-defined development environment with flexible routing, easy controller mappings, and basic request filtering.\r\nIt&#8217;s built on open source libraries such as [SoyNode](https://github.com/Obvious/soynode) for view rendering, [Klass](https://github.com/ded/klass) for its inheritance model, [Valentine](https://github.com/ded/valentine)\r\nfor functional development, and [connect.js](http://www.senchalabs.org/connect/) to give a bundle of other Node server related helpers.\r\n\r\n# Installation\r\n### Get the CLI\r\n    $ npm install matador -g\r\n\r\n### Create an app\r\n    $ matador init my-app\r\n    $ cd my-app && npm install matador\r\n\r\n### Start your app\r\n    $ node server.js\r\n\r\n# Dancing with the Bulls\r\n### Build on your app\r\n\r\n``` js\r\n// app/config/routes.js\r\n'/hello/:name': { 'get': 'Home.hello' }\r\n\r\n// app/controllers/HomeController.js\r\nhello: function (request, response, name) {\r\n  response.send('hello ' + name)\r\n}\r\n```\r\n\r\n### View Rendering\r\nUses [SoyNode](https://github.com/Obvious/soynode) to render Closure Templates.\r\n\r\n``` js\r\n// app/controllers/HomeController.js\r\nthis.render(response, 'index', {\r\n  title: 'Hello Bull Fighters'\r\n})\r\n```\r\n\r\n```\r\n<!-- app/views/layout.soy -->\r\n\r\n{namespace views.layout}\r\n\r\n/**\r\n * Renders the index page.\r\n * @param title Title of the page.\r\n */\r\n{template .layout autoescape=\"contextual\"}\r\n  <!DOCTYPE html>\r\n  <html>\r\n    <head>\r\n      <meta http-equiv='Content-type' content='text/html; charset=utf-8'>\r\n      <title>{$title}</title>\r\n      <link rel='stylesheet' href='/css/main.css' type='text/css'>\r\n    </head>\r\n    <body>\r\n      {$ij.bodyHtml |noAutoescape}\r\n    </body>\r\n  </html>\r\n{/template}\r\n\r\n```\r\n\r\n``` html\r\n{namespace views.index}\r\n\r\n/**\r\n * Renders a welcome message.\r\n * @param title Title of the page\r\n */\r\n{template .welcome}\r\n  <h1>Welcome to {$title}</h1>\r\n  (rendered with Closure Templates)\r\n{/template}\r\n\r\n```\r\n\r\n### Request Filtering\r\n``` js\r\n// app/controllers/ApplicationController.js\r\nmodule.exports = function (app, config) {\r\n  return app.controllers.Base.extend(function () {\r\n    this.addBeforeFilter('private', this.requireAuth)\r\n  })\r\n  .methods({\r\n    requireAuth: function (callback) {\r\n      if (this.request.cookies.authed) return callback(null)\r\n      this.response.redirect('/welcome')\r\n    }\r\n  , private: function () {\r\n      this.end('This is private')\r\n    }\r\n  , welcome: function () {\r\n      this.render('welcome')\r\n    }\r\n  })\r\n}\r\n```\r\n\r\n### Routing\r\nThe `app/config/routes.js` file is where you specify an array of tuples indicating where incoming requests will map to a `controller` and the appropriate method. If no action is specified, it defaults to 'index' as illustrated below:\r\n\r\n``` js\r\nmodule.exports = function (app) {\r\n  return {\r\n    '/': 'Home' // maps to ./HomeController.js => index\r\n  , '/admin': 'Admin.show' // maps to ./admin/AdminController.js => show\r\n  }\r\n}\r\n```\r\n\r\nYou can also specify method names to routes:\r\n\r\n``` js\r\nmodule.exports = function (app) {\r\n  return {\r\n    '/posts': {\r\n      'get': 'Posts.index', // maps to PostsController.js => #index\r\n      'post': 'Posts.create' // maps to PostsController.js => #create\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nMatador has support for anonymous controllers or other endpoints. This is\r\nuseful when mounting third-party apps, such as [Passport.js](http://passportjs.org):\r\n``` js\r\nmodule.exports = function (app) {\r\n  return {\r\n    '/hello': function (req, res) {\r\n       res.send('Hello')\r\n     }\r\n  }\r\n}\r\n```\r\n\r\n### How can I organize my Models?\r\nBy default, Models are thin with just a Base and Application Model in place. You can give them some meat, for example, and embed [Mongo](http://mongoosejs.com) Schemas. See the following as a brief illustration:\r\n\r\n``` js\r\n// app/models/ApplicationModel.js\r\nmodule.exports = function (app, config) {\r\n  return app.getModel('Base', true).extend(function () {\r\n    this.mongo = require('mongodb')\r\n    this.mongoose = require('mongoose')\r\n    this.Schema = this.mongoose.Schema\r\n    this.mongoose.connect('mongodb://localhost/myapp')\r\n  })\r\n}\r\n```\r\n\r\nThen create, for example, a UserModel.js that extended it...\r\n\r\n``` js\r\nmodule.exports = function (app, config) {\r\n  return app.getModel('Application', true).extend(function () {\r\n    this.DBModel = this.mongoose.model('User', new this.Schema({\r\n        name: { type: String, required: true, trim: true }\r\n      , email: { type: String, required: true, lowercase: true, trim: true }\r\n    }))\r\n  })\r\n  .methods({\r\n    create: function (name, email, callback) {\r\n      var user = new this.DBModel({\r\n          name: name\r\n        , email: email\r\n      })\r\n      user.save(callback)\r\n    }\r\n  , find: function (id, callback) {\r\n      this.DBModel.findById(id, callback)\r\n    }\r\n  })\r\n}\r\n```\r\n\r\nThis provides a proper abstraction between controller logic and how your models interact with a database then return data back to controllers.\r\n\r\nTake special note that models do not have access to requests or responses, as they rightfully shouldn't.\r\n\r\n### Model & Controller Inheritance\r\nThe inheritance model Matador uses is built with [Klass](https://github.com/ded/klass), and is exposed via a global `Class` variable (not all globals are bad). Class comes in two flavors where by constructors can be set via an `initialize` method, or a function reference, and by default (in the scaffold), Matador uses the function reference style so that you may benefit from the auto-initialization of super classes, and there is no need to call `this.supr()` in your constructors.\r\n\r\nIt is also possible to use Node.js's own inheritance via the 'util' module.\r\n\r\n### Valentine\r\nThe Valentine module is included as a simple tool giving you type checking, functional iterators, and some other nice utilities that often get used in applications of any size. It is exposed globally as `v`. It is used liberally in the Matador router, thus feel free to take advantage of its existence as well.\r\n\r\n# Scaffolding\r\n\r\n    $ matador controller [name]\r\n    $ matador model [name]\r\n\r\n# Contributing & Development\r\n\r\nQuestions, pull requests, bug reports are all welcome. Submit them here on Github.\r\nWhen submitting pull requests, please run through the linter to conform to the framework style\r\n\r\n    $ npm install -d\r\n    $ npm run-script lint\r\n\r\n# Authors\r\n\r\nObviously, [Dustin Senos](https://github.com/dustinsenos) & [Dustin Diaz](https://github.com/ded)\r\n\r\n# License\r\n\r\nCopyright 2012 [Obvious Corporation](http://obvious.com)\r\n\r\nLicensed under the Apache License, Version 2.0: http://www.apache.org/licenses/LICENSE-2.0\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}